#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$(dirname "$0")/config"

get_random_ports() {
  local iterations="${1:-1}"
  for (( i=0; i < iterations; i++ )); do
    local port=$RANDOM
    local quit=0
    while [ "$quit" -ne 1 ]; do
      netstat -an | grep $port > /dev/null
      if [ $? -gt 0 ]; then
        quit=1
      else
        port=$((port + 1))
      fi
    done
    echo $port
  done
}

get_container_ip() {
  docker inspect --format '{{ .NetworkSettings.IPAddress }}' "$1"
}

verify_service_name() {
  local SERVICE="$1"
  [[ ! -n "$SERVICE" ]] && dokku_log_fail "(verify_service_name) SERVICE must not be null"
  [[ ! -d "$PLUGIN_DATA_ROOT/$SERVICE" ]] && dokku_log_fail "$PLUGIN_SERVICE service $SERVICE does not exist"
  return 0
}

service_alias() {
  local SERVICE="$1"
  local ALIAS_FILE="$PLUGIN_DATA_ROOT/$SERVICE/ALIAS"

  verify_service_name "$1"
  if [[ -f "$ALIAS_FILE" ]]; then
    cat "$ALIAS_FILE"
  else
    echo "$PLUGIN_DEFAULT_ALIAS"
  fi
}

service_info() {
  local SERVICE="$1"
  local SERVICE_URL=$(service_url "$SERVICE")

  echo "       DSN: $SERVICE_URL"
}

service_list() {
  local SERVICES=$(ls $PLUGIN_DATA_ROOT 2> /dev/null)
  if [[ -z $SERVICES ]]; then
    dokku_log_warn "There are no $PLUGIN_SERVICE services"
  else
    dokku_log_info1_quiet "$PLUGIN_SERVICE services:"
    for SERVICE in $SERVICES; do
      dokku_log_verbose "$SERVICE $(service_status "$SERVICE")$(service_exposed_ports "$SERVICE")"
    done
  fi
}

service_exposed_ports() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local PORT_FILE="$SERVICE_ROOT/PORT"
  [[ ! -f $PORT_FILE ]] && return 0
  printf ", exposed port(s): %s" "$(cat "$PORT_FILE")"
}

service_link() {
  local APP="$2"
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local LINKS_FILE="$SERVICE_ROOT/LINKS"

  mkdir -p "$SERVICE_ROOT" || dokku_log_fail "Unable to create service directory"
  touch "$LINKS_FILE"
  echo "$APP" >> "$LINKS_FILE"
  sort "$LINKS_FILE" -u -o "$LINKS_FILE"

  dokku_log_info1 "Restarting app $APP"
  dokku ps:restart "$APP"
}

service_logs() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local ID=$(cat "$SERVICE_ROOT/ID")

  if [[ $2 == "-t" ]]; then
    DOKKU_LOGS_ARGS="--follow"
  else
    DOKKU_LOGS_ARGS="--tail 100"
  fi

  docker logs $DOKKU_LOGS_ARGS "$ID"
}

service_set_alias() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local ALIAS_FILE="$SERVICE_ROOT/ALIAS"

  mkdir -p "$SERVICE_ROOT" || dokku_log_fail "Unable to create service directory"
  touch "$ALIAS_FILE"
  echo "$2" > "$ALIAS_FILE"
}

service_status() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local ID="$(cat "$SERVICE_ROOT/ID")"

  is_container_status "$ID" "Dead" && echo "(dead)" && return 0
  is_container_status "$ID" "OOMKilled" && echo "(oomkilled)" && return 0
  is_container_status "$ID" "Paused" && echo "(paused)" && return 0
  is_container_status "$ID" "Restarting" && echo "(restarting)" && return 0
  is_container_status "$ID" "Running" && echo "(running)" && return 0
  echo "(stopped)" && return 0
}

service_port_expose() {
  service_start "$1"
  service_port_unpause "$1" "true" "${@:2}"
}

service_port_pause() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local EXPOSED_NAME="$(get_service_name "$SERVICE").ambassador"
  local PORT_FILE="$SERVICE_ROOT/PORT"
  local LOG_FAIL="$2"

  if [[ "$LOG_FAIL" == "true" ]]; then
    [[ ! -f "$PORT_FILE" ]] && dokku_log_fail "Service not exposed"
  else
    [[ ! -f "$PORT_FILE" ]] && return 0
  fi

  docker stop "$EXPOSED_NAME" > /dev/null
  docker rm "$EXPOSED_NAME" > /dev/null
  if [[ "$LOG_FAIL" == "true" ]]; then
    dokku_log_info1 "Service $SERVICE unexposed"
  fi
}

service_port_unexpose() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local PORT_FILE="$SERVICE_ROOT/PORT"
  service_port_pause "$SERVICE" "true"
  rm -rf "$PORT_FILE"
}

service_port_unpause() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local SERVICE_NAME=$(get_service_name "$SERVICE")
  local EXPOSED_NAME="${SERVICE_NAME}.ambassador"
  local PORT_FILE="$SERVICE_ROOT/PORT"
  local LOG_FAIL="$2"
  local PORTS=(${@:3})
  PORTS=(${PORTS[@]:-$(get_random_ports ${#PLUGIN_DATASTORE_PORTS[@]})})
  local ID=$(cat "$SERVICE_ROOT/ID")

  [[ "${#PORTS[@]}" != "${#PLUGIN_DATASTORE_PORTS[@]}" ]] && dokku_log_fail "${#PLUGIN_DATASTORE_PORTS[@]} ports to be exposed need to be provided"

  if [[ "$LOG_FAIL" == "true" ]]; then
    [[ -f "$PORT_FILE" ]] && PORTS=($(cat "$PORT_FILE")) && dokku_log_fail "Service $SERVICE already exposed on port(s) ${PORTS[*]}"
  else
    [[ ! -f "$PORT_FILE" ]] && return 0
    PORTS=($(cat "$PORT_FILE"))
  fi

  echo "${PORTS[@]}" > "$PORT_FILE"

  docker run -d --link "$SERVICE_NAME:redis" --name "$EXPOSED_NAME" $(docker_ports_options "${PORTS[@]}") --restart always --label dokku=ambassador --label dokku.ambassador=redis svendowideit/ambassador > /dev/null
  if [[ "$LOG_FAIL" == "true" ]]; then
    dokku_log_info1 "Service $SERVICE exposed on port(s) ${PORTS[*]}"
  fi
}

docker_ports_options() {
  local PORTS=("$@")
  for (( i=0; i < ${#PLUGIN_DATASTORE_PORTS[@]}; i++ )); do
    echo -n "-p ${PORTS[i]}:${PLUGIN_DATASTORE_PORTS[i]} "
  done
}

service_start() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local SERVICE_NAME=$(get_service_name "$SERVICE")
  local ID=$(docker ps -f status=running | grep "$SERVICE_NAME" | awk '{print $1}') || true
  [[ -n $ID ]] && dokku_log_warn "Service is already started" && return 0

  dokku_log_info1_quiet "Starting container"
  local PREVIOUS_ID=$(docker ps -f status=exited | grep "$SERVICE_NAME" | awk '{print $1}') || true
  if [[ -n $PREVIOUS_ID ]]; then
    docker start "$PREVIOUS_ID" > /dev/null
    service_port_unpause "$SERVICE"
    dokku_log_info2 "Container started"
  else
    dokku_log_verbose_quiet "No container exists for $SERVICE"
  fi
}

service_stop() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE";
  local SERVICE_NAME=$(get_service_name "$SERVICE")
  local ID=$(docker ps -f status=running | grep "$SERVICE_NAME" | awk '{print $1}') || true
  [[ -z $ID ]] && dokku_log_warn "Service is already stopped" && return 0

  if [[ -n $ID ]]; then
    dokku_log_info1_quiet "Stopping container"
    docker stop "$SERVICE_NAME" > /dev/null
    service_port_pause "$SERVICE"
    dokku_log_info2 "Container stopped"
  else
    dokku_log_verbose_quiet "No container exists for $SERVICE"
  fi
}

service_unlink() {
  local APP="$2"
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local LINKS_FILE="$SERVICE_ROOT/LINKS"

  mkdir -p "$SERVICE_ROOT" || dokku_log_fail "Unable to create service directory"
  touch "$LINKS_FILE"
  sed -i "/^$APP\$/d" "$LINKS_FILE"
  sort "$LINKS_FILE" -u -o "$LINKS_FILE"

  dokku_log_info1 "Restarting app $APP"
  dokku ps:restart "$APP"
}

service_url() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"

  local ID="$(cat "$SERVICE_ROOT/ID")"
  local IP="$(get_container_ip "$ID")"
  echo "$PLUGIN_SCHEME://$IP:${PLUGIN_DATASTORE_PORTS[0]}"
}

is_container_status () {
  local CID=$1
  local TEMPLATE="{{.State.$2}}"
  local CONTAINER_STATUS=$(docker inspect -f "$TEMPLATE" "$CID" || true)

  if [[ "$CONTAINER_STATUS" == "true" ]]; then
    return 0
  else
    return 1
  fi
}

get_service_name() {
  local SERVICE="$1"
  echo "dokku.${PLUGIN_COMMAND_PREFIX}.$SERVICE"
}
